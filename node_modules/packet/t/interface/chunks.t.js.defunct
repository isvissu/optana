#!/usr/bin/env node

require('proof')(1, function (createSerializer, deepEqual) {
    var alphabet = 'Alfa Bravo Charlie Delta \
                    Echo Foxtrot Golf Hotel India Juliet \
                    Kilo Lima Mike November Oscar Papa Quebec \
                    Romeo Sierra Tango Uniform Victor Whiskey \
                    Xray Yankee Zulu'

    var records = alphabet.split(/\s+/).map(function (phonetic, index) {
        return {
            phonetic: phonetic,
            charCode: phonetic.charCodeAt(0),
            index: index
        }
    })

    var createSerializer = require('../..').createSerializer
    var serializer = createSerializer({ precompiler: require('../require')  })

    serializer.packet('header', 'count: b32')
    serializer.packet('record', 'phonetic: b8z|utf8(), charCode: b16, index: b32')

    var parser = serializer.createParser()

    var chunk = new Buffer(32)
    var outgoing = records.slice(0), incoming = []

    // Serializer writes a header, parser looks for a header.
    serializer.serialize('header', { count: records.length }, send)
    parser.extract('header', head)

    // Serializer writes a chunk, parser parsers a chunk.
    // todo: this is going to fail, you're going hit the bounary exactly and
    // call write twice.
    var count, done
    while (!done) {
        count = serializer.write(chunk, 0, chunk.length)
        parser.parse(chunk, 0, count)
    }

    // Send the next record if there is one remaning.
    function send (written, buffer, start, end) {
        if (outgoing.length) {
            serializer.serialize('record', outgoing.shift(), send)
        }
        return start
    }

    // Get the header, then read the number of record specified in the header's
    // count field.
    function head (header, read) {
        parser.extract('record', get)
        function get (record, read, buffer, start, end) {
            incoming.push(record)
            if (--header.count > 0) {
                parser.extract('record', get)
                read += parser.parse(buffer, start, end)
            } else {
                deepEqual(incoming, records, 'streamed')
                done = true
            }
        }
        return read
    }
})
